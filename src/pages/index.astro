---
import SectionHeader from "src/components/SectionHeader.astro";
import GithubStarIcon from "src/components/GithubStarIcon.astro";
import GlobeIcon from "src/components/GlobeIcon.astro";
import MailIcon from "src/components/MailIcon.astro";
import LocationIcon from "src/components/LocationIcon.astro";
import PhoneIcon from "src/components/PhoneIcon.astro";
import ArrowUpRightIcon from "src/components/ArrowUpRightIcon.astro";
import PrintButton from "src/components/PrintButton.astro";

import Layout from "../layouts/Layout.astro";
import { css } from "styled-system/css";
import { flex } from "styled-system/patterns";
import data from "../data.json";
import "@fontsource-variable/rubik";

const metaStyle = flex({
  align: "center",
  gap: "2",
  justify: "flex-end",
  textDecoration: "none",
  "&:first-child": {
    position: "relative",
    top: "1px",
  },
});

const subtitle = css({ fontWeight: "bold", fontSize: "lg" });

const formattedWebsite = data.meta.website.replace(
  /^http[s]?:\/\/[\[w\]{3}\.]?/,
  "",
);
---

<Layout>
  <div
    class={css({ position: "fixed", bottom: "8", right: "8", zIndex: "10" })}
  >
    <PrintButton />
  </div>
  <div
    class={css({
      maxWidth: { base: "50rem", _print: "100%" },
      mx: "auto",
    })}
  >
    <div
      class={css({
        p: { base: "6", sm: "8", md: "16" },
        // bg: "$page",
        // my: { base: "5vw", sm: "20" },
        // borderRadius: "md",
        // boxShadow: "2xl",
        _print: {
          // borderRadius: "0",
          // boxShadow: "none",
          p: "0",
        },
      })}
    >
      <header
        class={flex({
          mb: "8",
          direction: { base: "column", sm: "row", _print: "row" },
        })}
      >
        <div
          class={css({
            flexGrow: { sm: "1", _print: "1" },
            mb: { base: "8", sm: "0", _print: "0" },
            mt: "-5px", // Align top lines despite line-height
          })}
        >
          <h1
            class={css({
              color: "$accent",
              fontSize: "4xl",
              textTransform: "uppercase",
              fontWeight: "bold",
              mb: "2",
              lineHeight: "1",
            })}
          >
            {data.meta.name}
          </h1>
          <p class={css({ fontSize: "md" })}>{data.meta.title}</p>
        </div>
        <div
          class={flex({
            textAlign: { sm: "right", _print: "right" },
            gap: "1.5",
            direction: "column",
            align: { base: "flex-start", sm: "flex-end", _print: "flex-end" },
          })}
        >
          <div class={metaStyle}><MailIcon />{data.meta.email}</div>
          <div class={metaStyle}><PhoneIcon />{data.meta.phone}</div>
          <div class={metaStyle}>
            <LocationIcon />{data.meta.location}
          </div>
          <a
            href={data.meta.website}
            target="_blank"
            class:list={[
              metaStyle,
              css({ "&:hover,&:focus": { textDecoration: "underline" } }),
            ]}><GlobeIcon />{formattedWebsite}</a
          >
        </div>
      </header>
      <SectionHeader>About Me</SectionHeader>
      <p>{data.meta.bio}</p>
      <SectionHeader>Work</SectionHeader>
      <div class={flex({ direction: "column", gap: "6" })}>
        {
          data.work.map((work) => {
            return (
              <div>
                <h3
                  class={css({ fontSize: "lg", fontWeight: "bold", mb: "1" })}
                >
                  {work.position}
                </h3>
                <div
                  class={flex({
                    justify: "space-between",
                    mb: "2",
                    fontWeight: "500",
                    flexWrap: "wrap",
                    gap: "2",
                  })}
                >
                  <div>{work.company}</div>
                  <div>
                    {work.startDate} - {work.endDate}, &nbsp;{work.location}
                  </div>
                </div>
                <ul
                  class={flex({
                    direction: "column",
                    pl: "4",
                    gap: "2",
                    mt: "2",
                  })}
                >
                  {work.highlights.map((highlight) => (
                    <li class={css({ listStyleType: "disc" })}>{highlight}</li>
                  ))}
                </ul>
              </div>
            );
          })
        }
      </div>
      <SectionHeader>Open Source</SectionHeader>
      <ul class={flex({ direction: "column", gap: { base: "6" } })}>
        {
          data.projects.map((project) => {
            const titleChild = project.url ? (
              <a
                href={project.url}
                target="_blank"
                rel="noreferrer"
                class={flex({ align: "center", textDecoration: "none" })}
              >
                {project.name}
                <ArrowUpRightIcon />
              </a>
            ) : (
              <>{project.name}</>
            );
            return (
              <li
                class={flex({ direction: "column", gap: "2" })}
                data-project={project.repo}
              >
                <div class={flex()}>
                  <h3 class={subtitle}>{titleChild}</h3>
                  <p
                    class={flex({
                      fontWeight: "bold",
                      ml: "auto",
                      align: "center",
                      gap: "1.5",
                    })}
                    aria-label={`${project.stars} GitHub stars`}
                  >
                    <span
                      aria-hidden="true"
                      class={css({
                        position: "relative",
                        bottom: "1px",
                      })}
                    >
                      <GithubStarIcon />
                    </span>
                    <span class="project-stars">{project.stars}</span>
                  </p>
                </div>
                <p>{project.description}</p>
              </li>
            );
          })
        }
      </ul>
      <SectionHeader>Education</SectionHeader>
      <ul class={flex({ direction: "column", gap: { base: "6" } })}>
        {
          data.education.map((edu) => (
            <li class={flex({ align: "baseline", gap: "4" })}>
              <h3 class={subtitle}>{edu.institution}</h3>
              <p>{edu.degreeType}</p>
              <p class={css({ ml: "auto" })}>{edu.endDate}</p>
            </li>
          ))
        }
      </ul>
      <SectionHeader>Skills</SectionHeader>
      <ul class={flex({ direction: "column", gap: { base: "6" } })}>
        {
          data.skills.map((skill) => (
            <li class={flex({ direction: "column", gap: "2" })}>
              <h3 class={subtitle}>{skill.name}</h3>
              <p>{skill.keywords.join(", ")}</p>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</Layout>

<script>
  const projects = document.querySelectorAll(
    "[data-project]",
  ) as NodeListOf<HTMLElement>;
  const headers = new Headers({
    "X-GitHub-Api-Version": "2022-11-28",
  });

  projects.forEach(async (el) => {
    const p = el.dataset.project;
    const response = await fetch(`https://api.github.com/repos/${p}`, {
      headers,
    });
    const data = await response.json();
    if (data.stargazers_count) {
      const starEl = el.querySelector(".project-stars");
      if (starEl) {
        let num = data.stargazers_count;
        num = num > 999 ? `${(num / 1000).toFixed(1)}k` : num.toString();
        starEl.innerHTML = num;
      }
    }
  });
</script>
